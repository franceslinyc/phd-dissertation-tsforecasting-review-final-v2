# `mtd`: An `R` Package for Modeling Gamma Time Series {#sec-appendix-ch1-pkag}

## Extension to the `mtd` Package

The `mtd` package by @zheng2022construction includes the Gaussian, Poisson, Negative Binomial, and Lomax MTD regression models. We extend the package to include the copula-based Gamma and zero-inflated Gamma MTD models.

The original `mtd` package can be installed and loaded from GitHub: 

```{}
devtools::install_github("xzheng42/mtd")
library(mtd)
```

## Usage of the Extended `mtd` Package

The extended `mtd` package can be installed and loaded from GitHub: 

```{}
devtools::install_github("franceslinyc/mtd")
library(mtd)
```

### Data Simulation 

The `rMTD` function generates synthetic time series data from a MTD model. The example below demonstrates how to simulate $n = 2000$ observations from a Gamma MTD model of order $J = 5$. The weights are defined using an exponential decay function and normalized to sum to $1$. The `param` argument is a named list specifying model parameters: `rho`, a vector of dependence coefficients, and `shape` and `rate` for the gamma marginal distribution. The function returns a list containing: (1) `y`, a vector of simulated data, (2) `label`, a vector of configuration variables indicating which lag component was selected at each time step, and (3) `lags`, a vector of specific lagged values. 

```{}
set.seed(42)
J <- 5
expDecay <- function(x, la) exp(-la*x)
true_weight <- expDecay(1:J, 1)
true_weight <- true_weight / sum(true_weight)
param <- list(rho = c(0.7, 0.5, 0.3, 0.1, 0.1), shape = 7, rate = 1)
ndata <- 2000
init_data <- c(2.5, 9.5, 4.5, 5.5, 7.5)
sim_data <- rMTD(mtdorder = J, weight = true_weight, family = "gamma", 
        param = param, size = ndata, trun = TRUE, init_data = init_data)
```

### Model Training 

```{}
test_start <- 1602
train_dat <- list(                     # training data 
        y     = sim_data$y[1:(test_start - 1)],
        label = sim_data$label[1:(test_start - 1)],
        lags  = sim_data$lags[1:(test_start - 1)]
)
```

```{}
mcmc_param <- list(niter = 165000, nburn = 5000, nthin = 20, nreport = 40) 

mtdorder <- 5
prior <- list(u_alp = 7, v_alp = 1,    # hyperparmeter for shape
              u_be = 2, v_be = 1,      # hyperparmeter for rate
              dir_shape = rep(1 / mtdorder, mtdorder),    # DIR weight
              alpha = 1, alpha_0 = 5, a_G0 = 1, b_G0 = 3) # SB and CDP weight
starting <- list(rho = rep(0, mtdorder), 
                 alp = 1, 
                 be = 1)
tuning <- list(step_size = 0.01, 
               upper_alp = 1 + 10,  # upper for slice sampler for shape
               upper_be = 1 + 10)   # upper for slice sampler for rate
```

The `tsMTD` function returns posterior samples of the model parameters. 

```{}
set.seed(32)
res <- tsMTD(obs = train_dat$y, 
             mtdorder = mtdorder, 
             family = "gamma",      # Gamma model 
             weight = cdp,          # CDP weight
             prior = prior, 
             tuning = tuning, 
             starting = starting, 
             mcmc_param = mcmc_param, 
             cop_family = 1)        # Gaussian copula
```

### Prediction

The `predMTD` function returns posterior predictive credible intervals generated by the MTD model. 

```{}
mtdorder <- 5
test_start <- start_index - mtdorder
test_dat <- list(                          # test data
        y = sim_data$y[test_start:length(sim_data$y)],
        label = sim_data$label[test_start:length(sim_data$label)],
        lags  = sim_data$lags[test_start:length(sim_data$lags)]
)
lags_L5 <- lagmat(test_dat$y, mtdorder)    # A matrix of lags
trun_obs_L5 <- test_dat$y[-(1:mtdorder)]   # true values for test data 
probs <- c(0.025, 0.975)
set.seed(32)
res_pred <- predMTD(res = res, family = "gamma", lags = lags_L5, probs = probs)
```

Since the `predMTD` function returns the posterior predictive distribution as part of its procedure, it can be adapted to compute additional summary statistics. For example, a modified version, `predMTD_2`, can be used to return the posterior predictive mean. 